Public Class MorgageCalculator

    'Team A : William Mitchell and Dennis Chapman
    'Instructor : Ashish Gulati
    'Project : Mortgage Calculator
    'Date : 12/05/2013
    'Dennis and Will worked together on the GUI and most of the code colaboratively

    'William Mitchell
    'Sets load events for the form
    Private Sub MorgageCalculator_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Call toolTipHelp()
    End Sub

    'Dennis Chapman
    'sets action listener for exit button
    Private Sub btnExit_Click(sender As Object, e As EventArgs) Handles btnExit.Click
        Call exitApp()
    End Sub

    'Dennis Chapman
    'sets action lister for quit menu item
    Private Sub mnuQuit_Click(sender As Object, e As EventArgs) Handles mnuQuit.Click
        Call exitApp()
    End Sub

    'William Mitchell
    'defines tooltips
    Private Sub toolTipHelp()
        Me.ToolTipMortgageCalculator.SetToolTip(Me.tbSalesPrice, "Enter the Sales Price for the home")
        Me.ToolTipMortgageCalculator.SetToolTip(Me.tbInterestRate, "Enter the Interest Rate as a % (ie. 6.5)")
        Me.ToolTipMortgageCalculator.SetToolTip(Me.tbDownPayment, "Enter the Down Payment")
        Me.ToolTipMortgageCalculator.SetToolTip(Me.tbExtraPayment, "Enter the extra ammount you will pay each period")
        Me.ToolTipMortgageCalculator.SetToolTip(Me.rbBiWeekly, "Select for 26 payments per year")
        Me.ToolTipMortgageCalculator.SetToolTip(Me.rbMonthly, "Select for 12 payments per year")
        Me.ToolTipMortgageCalculator.SetToolTip(Me.cbxMortgageTerm, "Select the Term in Years")
        Me.ToolTipMortgageCalculator.SetToolTip(Me.btnCalculate, "Calculate Payments and Display Amortization Table")
        Me.ToolTipMortgageCalculator.SetToolTip(Me.btnExit, "Exit the Application")
        Me.ToolTipMortgageCalculator.SetToolTip(Me.btnReset, "Reset the Form")
    End Sub

    'Dennis Chapman
    'sets action listener for reset menu item
    Private Sub mnuReset_Click(sender As Object, e As EventArgs) Handles mnuReset.Click
        Call resetForm()
    End Sub

    'Dennis Chapman
    'Sets action listener for reset button
    Private Sub btnReset_Click(sender As Object, e As EventArgs) Handles btnReset.Click
        Call resetForm()
    End Sub

    'Dennis Chapman
    'Sets action listener for calculate button click
    Private Sub btnCalculate_Click(sender As Object, e As EventArgs) Handles btnCalculate.Click
        Call calculatePayments()
    End Sub

    'William Mitchell
    'resets form
    Private Sub resetForm()
        Me.tbSalesPrice.Clear()
        Me.tbDownPayment.Clear()
        Me.tbInterestRate.Clear()
        Me.tbExtraPayment.Clear()
        Me.cbxMortgageTerm.SelectedIndex = -1
        Me.rbMonthly.Checked = False
        Me.rbBiWeekly.Checked = False
        Me.tbSalesPrice.Focus()
        Me.dgResults.DataSource = Nothing
    End Sub

    'Dennis Chapman
    Private Sub exitApp()
        Application.Exit()
    End Sub

    'William Mitchell
    Private Sub mnuCalculate_Click(sender As Object, e As EventArgs) Handles mnuCalculate.Click
        Call calculatePayments()
    End Sub


    'William Mitchell and Dennis Chapman
    'runs Calculation and populates table
    Private Sub calculatePayments()

        Dim intYears As Integer 'declares variable for years
        Dim strYear As String = Me.cbxMortgageTerm.SelectedItem 'creates a string to be truncated based on selection from the combobox
        Dim intTerm As Integer 'creates variable for the term in payments
        Dim intCounter As Integer 'creates a counter variable
        Dim tblResults As DataTable = New DataTable 'Creates a datatable and names it amortization
        Dim dblRate As Double 'Declares variable for rate
        Dim dblPrinciple As Double 'Declares variable for principle
        Dim dblNewPrinciple As Double 'Declares variable for new principle used in table population
        Dim dblInterestPayment As Double 'Declares variable for ammount paid to interest
        Dim dblPrinciplePayment As Double 'declares variable for ammount paid to principle
        Dim dblPayment As Double 'Declares variable for scheduled payment
        Dim dblAdditionalPayment As Double ''Declares variable for additional payment

        'Makes sure a term is selected for years
        If String.IsNullOrEmpty(Me.cbxMortgageTerm.Text) Then
            MessageBox.Show("Please select the mortgage term", "Input Error")
            Exit Sub
        End If

        'If sale price is empty display error message
        If tbSalesPrice.Text = "" Then
            MessageBox.Show("Please enter the loan amount.", "Input Error")
            Me.tbSalesPrice.Focus()
            Exit Sub
        End If

        'This will make sure the user is not entering a very low amount by accident
        If tbSalesPrice.Text <= 10000 Then
            Dim result = MessageBox.Show("Are you sure you entered the correct ammount?", "Really", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
            If result = Windows.Forms.DialogResult.No Then
                Call resetForm()
                Me.tbSalesPrice.Focus()
                Exit Sub
            End If
        End If

        intYears = Integer.Parse(strYear.Substring(0, strYear.Length - 5)) 'shortes year string so it can be parsed to an Int

        'If Interest rate is not between 2-8 percent the program will give error message
        If Not Double.TryParse(tbInterestRate.Text, dblRate) OrElse dblRate < 2 OrElse dblRate > 8 Then
            MessageBox.Show("Interest rate must be between 2 and 8 percent", "Input Error")
            Me.tbInterestRate.Focus()
            Me.tbInterestRate.Clear()
            Exit Sub
        End If

        'If Me.tbExtraPayment.Text = "a-z" Then
        '    MessageBox.Show("Please enter numbers", "Input Error")
        '    Me.tbExtraPayment.Clear()
        '    Me.tbExtraPayment.Focus()
        '    Exit Sub
        'End If

        'If Me.tbDownPayment.Text = "" Then
        '    MessageBox.Show("Please enter numbers", "Input Error")
        '    Me.tbDownPayment.Clear()
        '    Me.tbDownPayment.Focus()
        '    Exit Sub
        'End If

        'sets colum heading for table
        tblResults.Columns.Add("Payment #", GetType(Integer))
        tblResults.Columns.Add("Paid To Principle", GetType(String))
        tblResults.Columns.Add("Paid To Interest", GetType(String))
        tblResults.Columns.Add("Extra Payment", GetType(String))
        tblResults.Columns.Add("Scheduled Payment", GetType(String))
        tblResults.Columns.Add("Period ending balance", GetType(String))

        'conditional statement for determining starting principle value
        If String.IsNullOrEmpty(Me.tbDownPayment.Text) = False Then
            dblPrinciple = Double.Parse(Me.tbSalesPrice.Text)
        Else
            dblPrinciple = Double.Parse(Me.tbSalesPrice.Text) - Double.Parse(Me.tbDownPayment.Text)
        End If

        'Conditional statement for defining the value of extra payment
        If String.IsNullOrEmpty(Me.tbExtraPayment.Text) = False Then
            dblAdditionalPayment = Double.Parse(Me.tbExtraPayment.Text)
        End If

        'Conditional statement for setting the term and rate per period
        If rbBiWeekly.Checked = True Then
            intTerm = 26 * intYears
            dblRate = (Double.Parse(Me.tbInterestRate.Text) / 26) / 100
        Else
            intTerm = 12 * intYears
            dblRate = (Double.Parse(Me.tbInterestRate.Text) / 12) / 100
        End If

        'calculates the scheduled payment (amortization equation)
        dblPayment = (dblPrinciple * dblRate * (1 + dblRate) ^ intTerm) / ((1 + dblRate) ^ intTerm - 1)

        'For loop to populate the table
        For intCounter = 0 To intTerm - 1
            If dblPrinciple >= 0 Then 'sets condition for the table to end after the loan is paid off
                dblNewPrinciple = dblPrinciple * (1 + dblRate) - (dblPayment + dblAdditionalPayment) 'sets value for the ending period principle
                dblPrinciplePayment = (dblPrinciple - dblNewPrinciple) 'calculates ammount paid to principle
                dblInterestPayment = dblPayment - (dblPrinciplePayment - dblAdditionalPayment) 'calculates the ammount paid to interest

                'populates the rows for the table
                tblResults.Rows.Add(intCounter + 1, FormatCurrency(dblPrinciplePayment), FormatCurrency(dblInterestPayment),
                                    FormatCurrency(dblAdditionalPayment), FormatCurrency(dblPayment), FormatCurrency(dblNewPrinciple))
                dblPrinciple = dblNewPrinciple 'sets principle amount to the period ending principle amount for the next iteration
            End If

        Next
        Me.dgResults.DataSource = tblResults 'displays the table
    End Sub

End Class
